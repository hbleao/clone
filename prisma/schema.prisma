generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../src/database/dev.db"
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  registration  String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  AppMembership AppMembership[]
  apps          App[]
  PageChange    PageChange[]

  @@map("users")
}

model App {
  id            String          @id @default(uuid())
  title         String
  name          String
  slug          String          @unique
  description   String?
  owner         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  AppMembership AppMembership[]
  user          User            @relation(fields: [userId], references: [id])
  Component     Component[]
  PageTemplate  PageTemplate[]
  Page          Page[]

  @@map("apps")
}

model Page {
  id          String        @id @default(uuid())
  title       String
  slug        String
  content     String?
  status      String        @default("draft")
  type        String
  author      String
  appId       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  publishedAt DateTime?
  templateId  String?
  PageChange  PageChange[]
  template    PageTemplate? @relation(fields: [templateId], references: [id])
  app         App           @relation(fields: [appId], references: [id])
  seo         Seo?

  @@unique([appId, slug])
  @@map("pages")
}

model Seo {
  id          String   @id @default(uuid())
  pageId      String   @unique
  title       String?
  description String?
  keywords    String?
  canonical   String?
  robots      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  page        Page     @relation(fields: [pageId], references: [id])

  @@map("seos")
}

model Component {
  id                    String                  @id @default(uuid())
  name                  String
  type                  String
  description           String?
  schema                String
  content               String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  appId                 String
  app                   App                     @relation(fields: [appId], references: [id])
  PageTemplateComponent PageTemplateComponent[]

  @@map("components")
}

model PageTemplate {
  id          String                  @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  appId       String
  components  PageTemplateComponent[]
  app         App                     @relation(fields: [appId], references: [id])
  pages       Page[]

  @@map("page_templates")
}

model PageTemplateComponent {
  id          String       @id @default(uuid())
  templateId  String
  componentId String
  position    Int
  initialData String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  component   Component    @relation(fields: [componentId], references: [id])
  template    PageTemplate @relation(fields: [templateId], references: [id])

  @@unique([templateId, position])
  @@map("page_template_components")
}

model AppMembership {
  id     String @id @default(cuid())
  userId String
  appId  String
  role   String @default("AUTHOR")
  app    App    @relation(fields: [appId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, appId])
  @@map("app_memberships")
}

model PageChange {
  id         String   @id @default(uuid())
  pageId     String
  pageName   String
  timestamp  DateTime @default(now())
  userId     String
  userName   String
  action     String
  changeData String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  page       Page     @relation(fields: [pageId], references: [id])

  @@index([timestamp])
  @@index([userId])
  @@index([pageId])
  @@map("page_changes")
}
